// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ParkingAppSolution.DataAccess;

#nullable disable
 
namespace ParkingAppSolution.DataAccess.Migrations
{
    [DbContext(typeof(ParkingDbContext))]
    partial class ParkingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-rc.2.24474.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.CarDriverEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CarId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DriverId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("DriverId");

                    b.ToTable("CarDrivers");
                });

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.CarEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CarMarkId")
                        .HasColumnType("integer");

                    b.Property<string>("CarNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CarTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CarMarkId");

                    b.HasIndex("CarTypeId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.CarMarkEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CarMarks");
                });

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.CarModelEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CarMarkId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CarMarkId");

                    b.ToTable("CarModels");
                });

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.CarTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DriverCategoryId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CarTypes");
                });

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.ClientEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PasportNumber")
                        .HasColumnType("integer");

                    b.Property<byte>("PersonalSale")
                        .HasColumnType("smallint");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PasportNumber");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.ContractEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CarId")
                        .HasColumnType("integer");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<int>("ContractNumber")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ParkingPlaceId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ParkingPlaceId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.DriverCategoryDriverEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DriverCategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("DriverId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DriverCategoryId");

                    b.HasIndex("DriverId");

                    b.ToTable("DriverCategoryDrivers");
                });

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.DriverCategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<char>("CategorySymbol")
                        .HasColumnType("character(1)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("DriverCategories");
                });

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.ParkingEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ParkingName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ParkingTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Parkings");
                });

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.ParkingPlaceEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsReserved")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ParkingId")
                        .HasColumnType("integer");

                    b.Property<int>("ParkingPlaceTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("PlaceNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParkingId");

                    b.ToTable("ParkingPlaces");
                });

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.ParkingPlaceTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PlaceLenght")
                        .HasColumnType("integer");

                    b.Property<int>("PlaceWidth")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("ParakingPlaceTypes");
                });

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.ParkingTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ParkingTypes");
                });

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.PasportEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<int>("Seria")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Pasports");
                });

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.WorkerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ParkingId")
                        .HasColumnType("integer");

                    b.Property<int>("PasportNumber")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Salary")
                        .HasColumnType("numeric");

                    b.Property<byte>("WorkExperience")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ParkingId");

                    b.HasIndex("PasportNumber");

                    b.ToTable("Workers");

                    b.HasDiscriminator().HasValue("WorkerEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.DriverEntity", b =>
                {
                    b.HasBaseType("ParkingAppSolution.DataAccess.Entities.WorkerEntity");

                    b.Property<byte>("DriverExperience")
                        .HasColumnType("smallint");

                    b.Property<int>("WorkerId")
                        .HasColumnType("integer");

                    b.HasIndex("WorkerId")
                        .IsUnique();

                    b.ToTable("Workers", t =>
                        {
                            t.Property("WorkerId")
                                .HasColumnName("DriverEntity_WorkerId");
                        });

                    b.HasDiscriminator().HasValue("DriverEntity");
                });

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.SecurityEntity", b =>
                {
                    b.HasBaseType("ParkingAppSolution.DataAccess.Entities.WorkerEntity");

                    b.Property<byte>("SecurityWorkExperience")
                        .HasColumnType("smallint");

                    b.Property<int>("WorkerId")
                        .HasColumnType("integer");

                    b.HasIndex("WorkerId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("SecurityEntity");
                });

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.CarDriverEntity", b =>
                {
                    b.HasOne("ParkingAppSolution.DataAccess.Entities.CarEntity", "Car")
                        .WithMany("CarDrivers")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParkingAppSolution.DataAccess.Entities.DriverEntity", "Driver")
                        .WithMany("CarDrivers")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.CarEntity", b =>
                {
                    b.HasOne("ParkingAppSolution.DataAccess.Entities.CarMarkEntity", "CarMark")
                        .WithMany("Cars")
                        .HasForeignKey("CarMarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParkingAppSolution.DataAccess.Entities.CarTypeEntity", "CarType")
                        .WithMany("Cars")
                        .HasForeignKey("CarTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarMark");

                    b.Navigation("CarType");
                });

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.CarModelEntity", b =>
                {
                    b.HasOne("ParkingAppSolution.DataAccess.Entities.CarMarkEntity", "CarMark")
                        .WithMany("CarModels")
                        .HasForeignKey("CarMarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarMark");
                });

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.CarTypeEntity", b =>
                {
                    b.HasOne("ParkingAppSolution.DataAccess.Entities.DriverCategoryEntity", "DriverCategory")
                        .WithMany("CarTypes")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DriverCategory");
                });

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.ClientEntity", b =>
                {
                    b.HasOne("ParkingAppSolution.DataAccess.Entities.PasportEntity", "Pasport")
                        .WithMany("Clients")
                        .HasForeignKey("PasportNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pasport");
                });

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.ContractEntity", b =>
                {
                    b.HasOne("ParkingAppSolution.DataAccess.Entities.CarEntity", "Car")
                        .WithMany("Contracts")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParkingAppSolution.DataAccess.Entities.ClientEntity", "Client")
                        .WithMany("Contracts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParkingAppSolution.DataAccess.Entities.ParkingPlaceEntity", "ParkingPlace")
                        .WithMany("Contracts")
                        .HasForeignKey("ParkingPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Client");

                    b.Navigation("ParkingPlace");
                });

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.DriverCategoryDriverEntity", b =>
                {
                    b.HasOne("ParkingAppSolution.DataAccess.Entities.DriverCategoryEntity", "DriverCategory")
                        .WithMany("DriverCategoriesDrivers")
                        .HasForeignKey("DriverCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParkingAppSolution.DataAccess.Entities.DriverEntity", "Driver")
                        .WithMany("DriverCategoriesDrivers")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("DriverCategory");
                });

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.ParkingEntity", b =>
                {
                    b.HasOne("ParkingAppSolution.DataAccess.Entities.ParkingTypeEntity", "ParkingType")
                        .WithMany("Parkings")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParkingType");
                });

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.ParkingPlaceEntity", b =>
                {
                    b.HasOne("ParkingAppSolution.DataAccess.Entities.ParkingPlaceTypeEntity", "ParkingPlaceType")
                        .WithMany("ParkingPlaces")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParkingAppSolution.DataAccess.Entities.ParkingEntity", "Parking")
                        .WithMany("ParkingPlaces")
                        .HasForeignKey("ParkingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parking");

                    b.Navigation("ParkingPlaceType");
                });

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.WorkerEntity", b =>
                {
                    b.HasOne("ParkingAppSolution.DataAccess.Entities.ParkingEntity", "Parking")
                        .WithMany("Employers")
                        .HasForeignKey("ParkingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParkingAppSolution.DataAccess.Entities.PasportEntity", "Pasport")
                        .WithMany("Workers")
                        .HasForeignKey("PasportNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parking");

                    b.Navigation("Pasport");
                });

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.DriverEntity", b =>
                {
                    b.HasOne("ParkingAppSolution.DataAccess.Entities.WorkerEntity", "Worker")
                        .WithOne("Driver")
                        .HasForeignKey("ParkingAppSolution.DataAccess.Entities.DriverEntity", "WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.SecurityEntity", b =>
                {
                    b.HasOne("ParkingAppSolution.DataAccess.Entities.WorkerEntity", "Worker")
                        .WithOne("Security")
                        .HasForeignKey("ParkingAppSolution.DataAccess.Entities.SecurityEntity", "WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.CarEntity", b =>
                {
                    b.Navigation("CarDrivers");

                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.CarMarkEntity", b =>
                {
                    b.Navigation("CarModels");

                    b.Navigation("Cars");
                });

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.CarTypeEntity", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.ClientEntity", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.DriverCategoryEntity", b =>
                {
                    b.Navigation("CarTypes");

                    b.Navigation("DriverCategoriesDrivers");
                });

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.ParkingEntity", b =>
                {
                    b.Navigation("Employers");

                    b.Navigation("ParkingPlaces");
                });

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.ParkingPlaceEntity", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.ParkingPlaceTypeEntity", b =>
                {
                    b.Navigation("ParkingPlaces");
                });

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.ParkingTypeEntity", b =>
                {
                    b.Navigation("Parkings");
                });

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.PasportEntity", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Workers");
                });

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.WorkerEntity", b =>
                {
                    b.Navigation("Driver")
                        .IsRequired();

                    b.Navigation("Security")
                        .IsRequired();
                });

            modelBuilder.Entity("ParkingAppSolution.DataAccess.Entities.DriverEntity", b =>
                {
                    b.Navigation("CarDrivers");

                    b.Navigation("DriverCategoriesDrivers");
                });
#pragma warning restore 612, 618
        }
    }
}
